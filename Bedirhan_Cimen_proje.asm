
MOV A,#'$'
PUSH A    ;STACK BAŞ ELEMANI OLARAK BELİRLENDİ

START:
MOV 20H,#1 ; Hatalı OLARAK BAŞLA
MOV 21H,#0



LCALL CONFIGURE_LCD
MOV A,#':'
LCALL SEND_DATA
LCALL CONFIGURE_LCD

BACK:
MOV A,20H
JNZ HATASIZ
MOV 21H,#1   ; EĞER 20H BİR KERE YANLIŞ OLURSA DİZİ 
             ;YANLIŞ DEMEK AMA VERİ ALMAYA DEVAM ET 
HATASIZ:


LCALL KEYBOARD
CJNE A,#'A',DEVAM1
MOV A,#'('        ;SOL PARANTEZ GELİRSE STAK E AT   
PUSH A
LCALL SEND_DATA
DEVAM1:CJNE A,#'B',DEVAM2
MOV A,#')'       ;SAĞ PARANTEZ GELİRSE STACKTEN ELEMAN ÇEK VE BAK
LCALL SEND_DATA
POP A
SETB C
LCALL KONTROL

DEVAM2:CJNE A,#'C',DEVAM3
MOV A,#'['           ;SOL KOSELİ PARANTEZ GELİRSE STAK E AT   
PUSH A
LCALL SEND_DATA

DEVAM3:CJNE A,#'D',DEVAM4
MOV A,#']'       ;SAĞ KÖŞELİ PARANTEZ GELİRSE STACKTEN ELEMAN ÇEK VE BAK
INC R3
LCALL SEND_DATA
POP A
CLR C
LCALL KONTROL
DEVAM4:


CJNE A,#'#', BACK

MOV A,#0C0H
LCALL SEND_COMMAND

MOV A,21H    ;21H NİHAİ SONUC
JNZ YANLIS
MOV A,#'Y'
LCALL SEND_DATA
LJMP ENSON
YANLIS:
MOV A,#'D'
LCALL SEND_DATA



ENSON:

lJMP START


KONTROL:
JC NORMAL
CJNE A,#'[',HATALIKOSE
MOV 20H,#0    ;HATA YOK
LJMP FINKONTROL
HATALIKOSE:
MOV 20H,#1    ;HATA VAR 
LJMP FINKONTROL
NORMAL:
CJNE A,#'(',HATALINORMAL
MOV 20H,#0      ;HATA YOK
LJMP FINKONTROL
HATALINORMAL:
MOV 20H,#1       ;HATA VAR

FINKONTROL:
RET 




;----------------------------
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret


SEND_COMMAND:	;THIS  SUBROUTINE IS FOR SENDING THE COMMANDS TO LCD
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:	;THIS  SUBROUTINE IS FOR SENDING THE DATA TO BE DISPLAYED
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret

DELAY:	;A SHORT DELAY SUBROUTINE
	push 0
	push 1
	mov r0,#2
DELAY_OUTER_LOOP:
	mov r1,#2
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret
	
KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

